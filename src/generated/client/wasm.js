
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  user_type: 'user_type',
  name: 'name',
  first_name: 'first_name',
  last_name: 'last_name',
  profile_image_url: 'profile_image_url',
  phone: 'phone',
  timezone: 'timezone',
  language: 'language',
  email_verified: 'email_verified',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_login_at: 'last_login_at',
  auth_provider: 'auth_provider',
  phone_verified: 'phone_verified',
  onboarding_completed: 'onboarding_completed',
  onboarding_step: 'onboarding_step',
  age: 'age'
};

exports.Prisma.BrandProfileScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  company_name: 'company_name',
  industry: 'industry',
  website_url: 'website_url',
  description: 'description',
  logo_url: 'logo_url',
  company_size: 'company_size',
  location_country: 'location_country',
  location_city: 'location_city',
  verified: 'verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CreatorProfileScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  bio: 'bio',
  location_country: 'location_country',
  location_city: 'location_city',
  location_state: 'location_state',
  location_pincode: 'location_pincode',
  content_categories: 'content_categories',
  min_rate: 'min_rate',
  max_rate: 'max_rate',
  rate_currency: 'rate_currency',
  availability_status: 'availability_status',
  verified: 'verified',
  featured: 'featured',
  rating: 'rating',
  total_collaborations: 'total_collaborations',
  created_at: 'created_at',
  updated_at: 'updated_at',
  average_response_time: 'average_response_time',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  social_platforms: 'social_platforms',
  follower_count: 'follower_count',
  availability: 'availability',
  collaboration_types: 'collaboration_types',
  interests: 'interests'
};

exports.Prisma.SocialMediaAccountScalarFieldEnum = {
  id: 'id',
  creator_id: 'creator_id',
  platform: 'platform',
  username: 'username',
  url: 'url',
  follower_count: 'follower_count',
  engagement_rate: 'engagement_rate',
  avg_views: 'avg_views',
  verified: 'verified',
  last_updated: 'last_updated',
  created_at: 'created_at'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  title: 'title',
  description: 'description',
  campaign_type: 'campaign_type',
  target_platforms: 'target_platforms',
  budget_min: 'budget_min',
  budget_max: 'budget_max',
  currency: 'currency',
  target_demographics: 'target_demographics',
  required_follower_count_min: 'required_follower_count_min',
  required_follower_count_max: 'required_follower_count_max',
  content_guidelines: 'content_guidelines',
  hashtags: 'hashtags',
  mentions: 'mentions',
  deliverables: 'deliverables',
  deadline: 'deadline',
  status: 'status',
  applications_count: 'applications_count',
  max_collaborators: 'max_collaborators',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CampaignApplicationScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  creator_id: 'creator_id',
  proposed_rate: 'proposed_rate',
  currency: 'currency',
  pitch_message: 'pitch_message',
  portfolio_links: 'portfolio_links',
  estimated_delivery_date: 'estimated_delivery_date',
  status: 'status',
  applied_at: 'applied_at',
  responded_at: 'responded_at'
};

exports.Prisma.CollaborationScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  brand_id: 'brand_id',
  creator_id: 'creator_id',
  application_id: 'application_id',
  agreed_rate: 'agreed_rate',
  currency: 'currency',
  contract_terms: 'contract_terms',
  deadline: 'deadline',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at'
};

exports.Prisma.ContentSubmissionScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  admin_id: 'admin_id',
  content_type: 'content_type',
  content_url: 'content_url',
  caption: 'caption',
  hashtags: 'hashtags',
  mentions: 'mentions',
  platform: 'platform',
  submission_notes: 'submission_notes',
  status: 'status',
  submitted_at: 'submitted_at',
  reviewed_at: 'reviewed_at',
  published_at: 'published_at',
  post_url: 'post_url'
};

exports.Prisma.ContentReviewScalarFieldEnum = {
  id: 'id',
  content_submission_id: 'content_submission_id',
  reviewer_id: 'reviewer_id',
  review_type: 'review_type',
  feedback: 'feedback',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  payer_id: 'payer_id',
  payee_id: 'payee_id',
  admin_id: 'admin_id',
  amount: 'amount',
  currency: 'currency',
  platform_fee: 'platform_fee',
  net_amount: 'net_amount',
  payment_method: 'payment_method',
  transaction_id: 'transaction_id',
  status: 'status',
  initiated_at: 'initiated_at',
  completed_at: 'completed_at',
  failure_reason: 'failure_reason'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  brand_id: 'brand_id',
  creator_id: 'creator_id',
  invoice_number: 'invoice_number',
  amount: 'amount',
  currency: 'currency',
  tax_amount: 'tax_amount',
  total_amount: 'total_amount',
  due_date: 'due_date',
  status: 'status',
  issued_at: 'issued_at',
  paid_at: 'paid_at'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  sender_id: 'sender_id',
  message_text: 'message_text',
  message_type: 'message_type',
  file_url: 'file_url',
  file_name: 'file_name',
  read_at: 'read_at',
  created_at: 'created_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  reviewer_id: 'reviewer_id',
  reviewed_id: 'reviewed_id',
  rating: 'rating',
  review_text: 'review_text',
  review_type: 'review_type',
  is_public: 'is_public',
  created_at: 'created_at'
};

exports.Prisma.CampaignAnalyticsScalarFieldEnum = {
  id: 'id',
  campaign_id: 'campaign_id',
  metric_name: 'metric_name',
  metric_value: 'metric_value',
  recorded_date: 'recorded_date',
  created_at: 'created_at'
};

exports.Prisma.ContentPerformanceScalarFieldEnum = {
  id: 'id',
  content_submission_id: 'content_submission_id',
  platform: 'platform',
  likes_count: 'likes_count',
  comments_count: 'comments_count',
  shares_count: 'shares_count',
  views_count: 'views_count',
  reach_count: 'reach_count',
  engagement_rate: 'engagement_rate',
  recorded_at: 'recorded_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  parent_id: 'parent_id',
  is_active: 'is_active',
  sort_order: 'sort_order',
  created_at: 'created_at'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read_at: 'read_at',
  created_at: 'created_at'
};

exports.Prisma.PlatformSettingScalarFieldEnum = {
  id: 'id',
  setting_key: 'setting_key',
  setting_value: 'setting_value',
  setting_type: 'setting_type',
  description: 'description',
  updated_at: 'updated_at'
};

exports.Prisma.CollaborationChannelScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  admin_id: 'admin_id',
  created_at: 'created_at'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  collaboration_id: 'collaboration_id',
  admin_id: 'admin_id',
  type: 'type',
  title: 'title',
  description: 'description',
  price: 'price',
  deliverables: 'deliverables',
  created_at: 'created_at'
};

exports.Prisma.PhoneVerificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  phone: 'phone',
  code: 'code',
  token: 'token',
  expires_at: 'expires_at',
  verified_at: 'verified_at',
  created_at: 'created_at'
};

exports.Prisma.KYCScalarFieldEnum = {
  id: 'id',
  creator_id: 'creator_id',
  document_type: 'document_type',
  document_number: 'document_number',
  document_front_url: 'document_front_url',
  document_back_url: 'document_back_url',
  selfie_url: 'selfie_url',
  bank_account_number: 'bank_account_number',
  bank_ifsc_code: 'bank_ifsc_code',
  bank_account_holder: 'bank_account_holder',
  bank_name: 'bank_name',
  status: 'status',
  submitted_at: 'submitted_at',
  verified_at: 'verified_at',
  rejected_at: 'rejected_at',
  rejection_reason: 'rejection_reason',
  verified_by: 'verified_by'
};

exports.Prisma.PortfolioItemScalarFieldEnum = {
  id: 'id',
  creator_id: 'creator_id',
  title: 'title',
  description: 'description',
  media_url: 'media_url',
  media_type: 'media_type',
  platform: 'platform',
  tags: 'tags',
  is_featured: 'is_featured',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  brand: 'brand',
  creator: 'creator',
  admin: 'admin'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  suspended: 'suspended',
  pending: 'pending'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  ONE_TO_TEN: 'ONE_TO_TEN',
  ELEVEN_TO_FIFTY: 'ELEVEN_TO_FIFTY',
  FIFTY_ONE_TO_TWO_HUNDRED: 'FIFTY_ONE_TO_TWO_HUNDRED',
  TWO_HUNDRED_ONE_TO_THOUSAND: 'TWO_HUNDRED_ONE_TO_THOUSAND',
  THOUSAND_PLUS: 'THOUSAND_PLUS'
};

exports.AvailabilityStatus = exports.$Enums.AvailabilityStatus = {
  available: 'available',
  busy: 'busy',
  unavailable: 'unavailable'
};

exports.SocialPlatform = exports.$Enums.SocialPlatform = {
  instagram: 'instagram',
  tiktok: 'tiktok',
  youtube: 'youtube',
  twitter: 'twitter',
  facebook: 'facebook'
};

exports.CampaignType = exports.$Enums.CampaignType = {
  sponsored_post: 'sponsored_post',
  story: 'story',
  video: 'video',
  reel: 'reel',
  review: 'review',
  giveaway: 'giveaway'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  draft: 'draft',
  active: 'active',
  paused: 'paused',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
  withdrawn: 'withdrawn'
};

exports.CollaborationStatus = exports.$Enums.CollaborationStatus = {
  active: 'active',
  content_submitted: 'content_submitted',
  revision_requested: 'revision_requested',
  approved: 'approved',
  completed: 'completed',
  cancelled: 'cancelled',
  disputed: 'disputed'
};

exports.ContentType = exports.$Enums.ContentType = {
  image: 'image',
  video: 'video',
  story: 'story',
  reel: 'reel',
  post: 'post'
};

exports.ContentStatus = exports.$Enums.ContentStatus = {
  draft: 'draft',
  submitted: 'submitted',
  approved: 'approved',
  revision_requested: 'revision_requested',
  rejected: 'rejected'
};

exports.ReviewType = exports.$Enums.ReviewType = {
  approval: 'approval',
  revision: 'revision',
  rejection: 'rejection'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  credit_card: 'credit_card',
  bank_transfer: 'bank_transfer',
  paypal: 'paypal',
  stripe: 'stripe'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  draft: 'draft',
  sent: 'sent',
  paid: 'paid',
  overdue: 'overdue',
  cancelled: 'cancelled'
};

exports.MessageType = exports.$Enums.MessageType = {
  text: 'text',
  file: 'file',
  system: 'system'
};

exports.ReviewDirection = exports.$Enums.ReviewDirection = {
  brand_to_creator: 'brand_to_creator',
  creator_to_brand: 'creator_to_brand'
};

exports.SettingType = exports.$Enums.SettingType = {
  string: 'string',
  number: 'number',
  boolean: 'boolean',
  json: 'json'
};

exports.PackageType = exports.$Enums.PackageType = {
  predefined: 'predefined',
  custom: 'custom'
};

exports.KYCStatus = exports.$Enums.KYCStatus = {
  pending: 'pending',
  verified: 'verified',
  rejected: 'rejected'
};

exports.PortfolioMediaType = exports.$Enums.PortfolioMediaType = {
  image: 'image',
  video: 'video',
  text: 'text'
};

exports.Prisma.ModelName = {
  User: 'User',
  BrandProfile: 'BrandProfile',
  CreatorProfile: 'CreatorProfile',
  SocialMediaAccount: 'SocialMediaAccount',
  Campaign: 'Campaign',
  CampaignApplication: 'CampaignApplication',
  Collaboration: 'Collaboration',
  ContentSubmission: 'ContentSubmission',
  ContentReview: 'ContentReview',
  Payment: 'Payment',
  Invoice: 'Invoice',
  Message: 'Message',
  Review: 'Review',
  CampaignAnalytics: 'CampaignAnalytics',
  ContentPerformance: 'ContentPerformance',
  Category: 'Category',
  Notification: 'Notification',
  PlatformSetting: 'PlatformSetting',
  CollaborationChannel: 'CollaborationChannel',
  Package: 'Package',
  PhoneVerification: 'PhoneVerification',
  KYC: 'KYC',
  PortfolioItem: 'PortfolioItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
